pdp11
Go Sydney Meetup
19 Feb 2014

Dave Cheney
dave@cheney.net
http://dave.cheney.net/
@davecheney

* pdp11

* What is this talk about

- A bit of history

- A bit of evangalism

- A few tips

- A few gotchas

* Disclaimer

This project has very little to do with the real world.

* Why the PDP-11 ?

.image pdp11/102680487-03-01.jpeg

image courtesy of the Computer History Museum

* Why the PDP-11 ?

- Unix

- Every computer you interact with today can trace itself back to the work of Ken and Dennis and the architectural style of the PDP-11.

* Yup, Windows as well

- The PDP-11 was the predecessor to the VAX-11/780.

- Dave Cutler, the author of VMS, the _other_ operating system for the 11/780 decamped to Microsoft after a struggle over the next generation of VAX hardware.

- Cutler and VMS formed the conceptual basis of Windows NT.

.image pdp11/showstopper.jpg

* Why rewrite the simulator in Go ?

Go appears to be an excellent language for writing simulators

- NES
- TRS-80
- ZX Spectrum
- Quite a few 6502 implementations
- (many) LISPs
- [[http://dave.cheney.net/2013/01/09/go-the-language-for-emulators][dave.cheney.net/2013/01/09/go-the-language-for-emulators]]

The Go simulator used as a basis for the Arduino version.

* The documentation is fantastic

Let's look at the ADC instruction.

.image pdp11/adc.png

* Resources, resources, resources

- Bitsavers.org has every user manual, every reference manual, and most of the schematics for all of the DEC PDP line of computers. 

- They also have disk images, tape images, everything you will need

- DEC Diagnostics

* Time marches on

This is the Cray-1a, an FPGA recreation of Seymour Cray's famous supercomputer. 

.image pdp11/cray1a.jpg

No copies of the Cray operating system exist today.

* Truth

* 000001

* An example

- MOV instruction

- Takes two operands, source and destination

- Each operand can be a constant, a register, a pointer, or and indirect pointer, encoded as part of the operand.

- Encoded as x1SSDDA

- SS/DD is 3 bits for the operand mode, and 3 bits for the register.

* An example (cont.)

- Move the lower byte in register 3 to register 4

    MOVB R3, R4 110304
    MOVB R3, R4 90c4
    MOVB R3, R4 37060

[[http://play.golang.org/p/N09KhM-4ql][play.golang.org/p/N09KhM-4ql]]

* Some drawbacks

    255
    0xff
    377

    65535
    0xffff
    177777

Octal works well for groupings of 3 bits, poorly for groupings of 4.

[[http://play.golang.org/p/hqH-e8QuaG][/play.golang.org/p/hqH-e8QuaG]]

* A cautionary tail

.play pdp11/oops.go

* The simulator

* Actually two simulators

- Started as a Javascript simulator, [[http://pdp11.aiju.de/][pdp11.aiju.de/]]
- Ported to Go, [[https://github.com/davecheney/pdp11][github.com/davecheney/pdp11]]
- Ported to Arduino flavored C++, [[https://github.com/davecheney/avr11][github.com/davecheney/avr11]]

* The process

- Download the .js source 
- One file at a time, transcribe function by function from .js to Go (surprisingly straight forward)
- A few tricky bits
- Console and Disk Drive used timers to simulate delays.
- Traps (see later)
- Once the simulator worked, iterate and refactor to make the code more idiomatic.

- Bonus: fork the Go code and translate again into Arduino flavored C++

* The main loop

.code pdp11/loop.go

* Types

Consider defining types for various data paths to differentiate the role of a variable.

.code pdp11/uint18.go

* Types (cont.)

Use named types to consolidate common logic.

.code pdp11/regaddr.go

Be careful with your inlining budget.

* Traps

The PDP-11 has interrupts and traps. Handling traps is a little tricky

.code pdp11/trap.go /START1/,/END1/

* Traps (cont.)

.code pdp11/trap.go /START2/,/END2/

* Testing

// pdp11

    # LS -L
    TOTAL 241
    DRWXRWXR-X  2 BIN      1104 MAY 14 00:47 BIN
    DRWXRWXR-X  2 BIN      1824 OCT 10 12:31 DEV
    DRWXRWXR-X  2 BIN       496 OCT 10 12:32 ETC
    -RWXRWXRWX  1 ROOT    29074 OCT 10 12:28 HPUNIX
    DRWXRWXR-X  2 BIN       464 MAY 13 23:35 LIB
    DRWXRWXR-X  2 BIN        32 MAY 13 20:01 MNT
    -RWXRWXRWX  1 ROOT    28836 OCT 10 12:22 RKUNIX
    -RWXRWXRWX  1 ROOT    29020 OCT 10 12:25 RPUNIX
    DRWXRWXRWX  2 BIN       272 OCT 10 12:31 TMP
    -RWXRWXRWX  1 ROOT    27312 OCT 10 12:31 UNIX
    DRWXRWXR-X 14 BIN       224 MAY 13 20:16 USR

* Testing (cont.)

// avr11

    # LS -L
    TOTAL 241
    DRWXRWXR-X  2 BIN         0 MAY 14 00:47 BIN
    DRWXRWXR-X  2 BIN         0 OCT 10 12:31 DEV
    DRWXRWXR-X  2 BIN         0 OCT 10 12:32 ETC
    -RWXRWXRWX  1 ROOT        0 OCT 10 12:28 HPUNIX
    DRWXRWXR-X  2 BIN         0 MAY 13 23:35 LIB
    DRWXRWXR-X  2 BIN         0 MAY 13 20:01 MNT
    -RWXRWXRWX  1 ROOT        0 OCT 10 12:22 RKUNIX
    -RWXRWXRWX  1 ROOT        0 OCT 10 12:25 RPUNIX
    DRWXRWXRWX  2 BIN         0 OCT 10 12:31 TMP
    -RWXRWXRWX  1 ROOT        0 OCT 10 12:31 UNIX
    DRWXRWXR-X 14 BIN         0 MAY 13 20:16 USR

Missing a carry bit somewhere

* Testing (cont.)

- The .js version, and my inital port was very monolithic.
- cpu.step() was over 1,000 lines of switch statements, directly executed instructions
- Execute synthetic commands to make sure the simulator doesn't barf

.play pdp11/runtest.go

* Testing (cont.)

.code pdp11/pdp.txt

* Instruction testing

.code pdp11/cpu_test.go /START1 OMIT/,/END1 OMIT/

* Instruction testing (cont.)

.code pdp11/cpu_test.go /START2 OMIT/,/END2 OMIT/

* Instruction testing (cont.)

Adding helpers sometimes makes testing coverage harder.

.code pdp11/swab.go

* Gotchas

* Gotchas (part 1)

`ADD()` contains a bug, what is it ?

.code pdp11/add.go

* Gotchas (part 2)

What happens if `sector`, `surface`, and `cylinder` are declared as `uint16` ?

.code pdp11/rk11.go

* Gotchas (part 3)

Will this code work on all platforms ?

.code pdp11/mul.go

* Demo time

.play pdp11/demo.go

* Thank you

Try it for yourself

   go get github.com/davecheney/unix6
   $GOPATH/bin/unix6
